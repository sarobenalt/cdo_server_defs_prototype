/**
 *  * Copyright (c) 2004 - 2011 Eike Stepper (Berlin, Germany) and others.
 *  * All rights reserved. This program and the accompanying materials
 *  * are made available under the terms of the Eclipse Public License v1.0
 *  * which accompanies this distribution, and is available at
 *  * http://www.eclipse.org/legal/epl-v10.html
 *  * 
 *  * Contributors:
 *  *    Andre Dietisheim - initial API and implementation
 */
package org.eclipse.net4j.defs.provider;

import org.eclipse.net4j.defs.util.Net4jDefsAdapterFactory;

import org.eclipse.net4j.util.defs.DefContainer;
import org.eclipse.net4j.util.defs.Net4jUtilDefsPackage;
import org.eclipse.net4j.util.defs.util.Net4jUtilDefsSwitch;
import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.common.util.ResourceLocator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.edit.command.CommandParameter;
import org.eclipse.emf.edit.domain.EditingDomain;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IChildCreationExtender;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.eclipse.net4j.defs.Net4jDefsFactory;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers. The adapters generated by this
 * factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}. The adapters
 * also support Eclipse property sheets. Note that most of the adapters are shared among multiple instances. <!--
 * begin-user-doc --> <!-- end-user-doc -->
 * 
 * @generated
 * @since 4.1
 */
public class Net4jDefsItemProviderAdapterFactory extends Net4jDefsAdapterFactory implements ComposeableAdapterFactory,
    IChangeNotifier, IDisposable
{
  /**
   * This keeps track of the root adapter factory that delegates to this adapter factory.
   * <!-- begin-user-doc --> <!--
   * end-user-doc -->
   * @generated
   */
  protected ComposedAdapterFactory parentAdapterFactory;

  /**
   * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
   * <!-- begin-user-doc --> <!--
   * end-user-doc -->
   * @generated
   */
  protected IChangeNotifier changeNotifier = new ChangeNotifier();

  /**
   * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}. <!--
   * begin-user-doc --> <!-- end-user-doc -->
   * 
   * @generated
   */
  protected Collection<Object> supportedTypes = new ArrayList<Object>();

  /**
   * This constructs an instance.
   * <!-- begin-user-doc --> <!-- end-user-doc -->
   * @generated
   */
  public Net4jDefsItemProviderAdapterFactory()
  {
    supportedTypes.add(IEditingDomainItemProvider.class);
    supportedTypes.add(IStructuredItemContentProvider.class);
    supportedTypes.add(ITreeItemContentProvider.class);
    supportedTypes.add(IItemLabelProvider.class);
    supportedTypes.add(IItemPropertySource.class);
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.net4j.defs.TCPConnectorDef} instances. <!--
   * begin-user-doc --> <!-- end-user-doc -->
   * 
   * @generated
   */
  protected TCPConnectorDefItemProvider tcpConnectorDefItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.net4j.defs.TCPConnectorDef}.
   * <!-- begin-user-doc --> <!--
   * end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createTCPConnectorDefAdapter()
  {
    if (tcpConnectorDefItemProvider == null)
    {
      tcpConnectorDefItemProvider = new TCPConnectorDefItemProvider(this);
    }

    return tcpConnectorDefItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.net4j.defs.TCPAcceptorDef} instances. <!--
   * begin-user-doc --> <!-- end-user-doc -->
   * 
   * @generated
   */
  protected TCPAcceptorDefItemProvider tcpAcceptorDefItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.net4j.defs.TCPAcceptorDef}.
   * <!-- begin-user-doc --> <!--
   * end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createTCPAcceptorDefAdapter()
  {
    if (tcpAcceptorDefItemProvider == null)
    {
      tcpAcceptorDefItemProvider = new TCPAcceptorDefItemProvider(this);
    }

    return tcpAcceptorDefItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.net4j.defs.JVMAcceptorDef} instances. <!--
   * begin-user-doc --> <!-- end-user-doc -->
   * 
   * @generated
   */
  protected JVMAcceptorDefItemProvider jvmAcceptorDefItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.net4j.defs.JVMAcceptorDef}.
   * <!-- begin-user-doc --> <!--
   * end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createJVMAcceptorDefAdapter()
  {
    if (jvmAcceptorDefItemProvider == null)
    {
      jvmAcceptorDefItemProvider = new JVMAcceptorDefItemProvider(this);
    }

    return jvmAcceptorDefItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.net4j.defs.JVMConnectorDef} instances. <!--
   * begin-user-doc --> <!-- end-user-doc -->
   * 
   * @generated
   */
  protected JVMConnectorDefItemProvider jvmConnectorDefItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.net4j.defs.JVMConnectorDef}.
   * <!-- begin-user-doc --> <!--
   * end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createJVMConnectorDefAdapter()
  {
    if (jvmConnectorDefItemProvider == null)
    {
      jvmConnectorDefItemProvider = new JVMConnectorDefItemProvider(this);
    }

    return jvmConnectorDefItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.net4j.defs.HTTPConnectorDef} instances. <!--
   * begin-user-doc --> <!-- end-user-doc -->
   * 
   * @generated
   */
  protected HTTPConnectorDefItemProvider httpConnectorDefItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.net4j.defs.HTTPConnectorDef}.
   * <!-- begin-user-doc --> <!--
   * end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createHTTPConnectorDefAdapter()
  {
    if (httpConnectorDefItemProvider == null)
    {
      httpConnectorDefItemProvider = new HTTPConnectorDefItemProvider(this);
    }

    return httpConnectorDefItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.net4j.defs.TCPSelectorDef} instances. <!--
   * begin-user-doc --> <!-- end-user-doc -->
   * 
   * @generated
   */
  protected TCPSelectorDefItemProvider tcpSelectorDefItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.net4j.defs.TCPSelectorDef}.
   * <!-- begin-user-doc --> <!--
   * end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createTCPSelectorDefAdapter()
  {
    if (tcpSelectorDefItemProvider == null)
    {
      tcpSelectorDefItemProvider = new TCPSelectorDefItemProvider(this);
    }

    return tcpSelectorDefItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.net4j.defs.BufferPoolDef} instances. <!--
   * begin-user-doc --> <!-- end-user-doc -->
   * 
   * @generated
   */
  protected BufferPoolDefItemProvider bufferPoolDefItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.net4j.defs.BufferPoolDef}.
   * <!-- begin-user-doc --> <!--
   * end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createBufferPoolDefAdapter()
  {
    if (bufferPoolDefItemProvider == null)
    {
      bufferPoolDefItemProvider = new BufferPoolDefItemProvider(this);
    }

    return bufferPoolDefItemProvider;
  }

  /**
   * This returns the root adapter factory that contains this factory.
   * <!-- begin-user-doc --> <!-- end-user-doc -->
   * @generated
   */
  public ComposeableAdapterFactory getRootAdapterFactory()
  {
    return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
  }

  /**
   * This sets the composed adapter factory that contains this factory.
   * <!-- begin-user-doc --> <!-- end-user-doc -->
   * @generated
   */
  public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory)
  {
    this.parentAdapterFactory = parentAdapterFactory;
  }

  /**
   * <!-- begin-user-doc --> <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object type)
  {
    return supportedTypes.contains(type) || super.isFactoryForType(type);
  }

  /**
   * This implementation substitutes the factory itself as the key for the adapter.
   * <!-- begin-user-doc --> <!--
   * end-user-doc -->
   * @generated
   */
  @Override
  public Adapter adapt(Notifier notifier, Object type)
  {
    return super.adapt(notifier, this);
  }

  /**
   * <!-- begin-user-doc --> <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object adapt(Object object, Object type)
  {
    if (isFactoryForType(type))
    {
      Object adapter = super.adapt(object, type);
      if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter)))
      {
        return adapter;
      }
    }

    return null;
  }

  /**
   * This adds a listener.
   * <!-- begin-user-doc --> <!-- end-user-doc -->
   * @generated
   */
  public void addListener(INotifyChangedListener notifyChangedListener)
  {
    changeNotifier.addListener(notifyChangedListener);
  }

  /**
   * This removes a listener.
   * <!-- begin-user-doc --> <!-- end-user-doc -->
   * @generated
   */
  public void removeListener(INotifyChangedListener notifyChangedListener)
  {
    changeNotifier.removeListener(notifyChangedListener);
  }

  /**
   * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
   * <!-- begin-user-doc --> <!--
   * end-user-doc -->
   * @generated
   */
  public void fireNotifyChanged(Notification notification)
  {
    changeNotifier.fireNotifyChanged(notification);

    if (parentAdapterFactory != null)
    {
      parentAdapterFactory.fireNotifyChanged(notification);
    }
  }

  /**
   * This disposes all of the item providers created by this factory. 
   * <!-- begin-user-doc --> <!-- end-user-doc -->
   * @generated
   */
  public void dispose()
  {
    if (tcpConnectorDefItemProvider != null)
      tcpConnectorDefItemProvider.dispose();
    if (tcpAcceptorDefItemProvider != null)
      tcpAcceptorDefItemProvider.dispose();
    if (jvmAcceptorDefItemProvider != null)
      jvmAcceptorDefItemProvider.dispose();
    if (jvmConnectorDefItemProvider != null)
      jvmConnectorDefItemProvider.dispose();
    if (httpConnectorDefItemProvider != null)
      httpConnectorDefItemProvider.dispose();
    if (tcpSelectorDefItemProvider != null)
      tcpSelectorDefItemProvider.dispose();
    if (bufferPoolDefItemProvider != null)
      bufferPoolDefItemProvider.dispose();
  }

  /**
   * A child creation extender for the {@link Net4jUtilDefsPackage}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static class Net4jUtilDefsChildCreationExtender implements IChildCreationExtender
  {
    /**
     * The switch for creating child descriptors specific to each extended class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected static class CreationSwitch extends Net4jUtilDefsSwitch<Object>
    {
      /**
       * The child descriptors being populated.
       * <!-- begin-user-doc -->
       * <!-- end-user-doc -->
       * @generated
       */
      protected List<Object> newChildDescriptors;

      /**
       * The domain in which to create the children.
       * <!-- begin-user-doc -->
       * <!-- end-user-doc -->
       * @generated
       */
      protected EditingDomain editingDomain;

      /**
       * Creates the a switch for populating child descriptors in the given domain.
       * <!-- begin-user-doc -->
       * <!-- end-user-doc -->
       * @generated
       */
      CreationSwitch(List<Object> newChildDescriptors, EditingDomain editingDomain)
      {
        this.newChildDescriptors = newChildDescriptors;
        this.editingDomain = editingDomain;
      }

      /**
       * <!-- begin-user-doc -->
       * <!-- end-user-doc -->
       * @generated
       */
      @Override
      public Object caseDefContainer(DefContainer object)
      {
        newChildDescriptors.add(createChildParameter(Net4jUtilDefsPackage.Literals.DEF_CONTAINER__DEFINITIONS,
            Net4jDefsFactory.eINSTANCE.createTCPConnectorDef()));

        newChildDescriptors.add(createChildParameter(Net4jUtilDefsPackage.Literals.DEF_CONTAINER__DEFINITIONS,
            Net4jDefsFactory.eINSTANCE.createTCPAcceptorDef()));

        newChildDescriptors.add(createChildParameter(Net4jUtilDefsPackage.Literals.DEF_CONTAINER__DEFINITIONS,
            Net4jDefsFactory.eINSTANCE.createJVMAcceptorDef()));

        newChildDescriptors.add(createChildParameter(Net4jUtilDefsPackage.Literals.DEF_CONTAINER__DEFINITIONS,
            Net4jDefsFactory.eINSTANCE.createJVMConnectorDef()));

        newChildDescriptors.add(createChildParameter(Net4jUtilDefsPackage.Literals.DEF_CONTAINER__DEFINITIONS,
            Net4jDefsFactory.eINSTANCE.createHTTPConnectorDef()));

        newChildDescriptors.add(createChildParameter(Net4jUtilDefsPackage.Literals.DEF_CONTAINER__DEFINITIONS,
            Net4jDefsFactory.eINSTANCE.createTCPSelectorDef()));

        newChildDescriptors.add(createChildParameter(Net4jUtilDefsPackage.Literals.DEF_CONTAINER__DEFINITIONS,
            Net4jDefsFactory.eINSTANCE.createBufferPoolDef()));

        return null;
      }

      /**
       * <!-- begin-user-doc -->
       * <!-- end-user-doc -->
       * @generated
       */
      protected CommandParameter createChildParameter(Object feature, Object child)
      {
        return new CommandParameter(null, feature, child);
      }

    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public Collection<Object> getNewChildDescriptors(Object object, EditingDomain editingDomain)
    {
      ArrayList<Object> result = new ArrayList<Object>();
      new CreationSwitch(result, editingDomain).doSwitch((EObject)object);
      return result;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public ResourceLocator getResourceLocator()
    {
      return Net4jDefsEditPlugin.INSTANCE;
    }
  }

}
