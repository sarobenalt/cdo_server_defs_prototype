/**
 *  * Copyright (c) 2004 - 2011 Eike Stepper (Berlin, Germany) and others.
 *  * All rights reserved. This program and the accompanying materials
 *  * are made available under the terms of the Eclipse Public License v1.0
 *  * which accompanies this distribution, and is available at
 *  * http://www.eclipse.org/legal/epl-v10.html
 *  * 
 *  * Contributors:
 *  *    Andre Dietisheim - initial API and implementation
 */
package org.eclipse.emf.cdo.defs.provider;

import org.eclipse.emf.cdo.defs.util.CDODefsAdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.common.util.ResourceLocator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.edit.command.CommandParameter;
import org.eclipse.emf.edit.domain.EditingDomain;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IChildCreationExtender;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.eclipse.net4j.util.defs.DefContainer;
import org.eclipse.net4j.util.defs.Net4jUtilDefsPackage;
import org.eclipse.net4j.util.defs.util.Net4jUtilDefsSwitch;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import org.eclipse.emf.cdo.defs.CDODefsFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers. The adapters generated by this
 * factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}. The adapters
 * also support Eclipse property sheets. Note that most of the adapters are shared among multiple instances. <!--
 * begin-user-doc --> <!-- end-user-doc -->
 * 
 * @generated
 * @since 4.1
 */
public class CDODefsItemProviderAdapterFactory extends CDODefsAdapterFactory implements ComposeableAdapterFactory,
    IChangeNotifier, IDisposable
{
  /**
   * This keeps track of the root adapter factory that delegates to this adapter factory.
   * <!-- begin-user-doc --> <!--
   * end-user-doc -->
   * @generated
   */
  protected ComposedAdapterFactory parentAdapterFactory;

  /**
   * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
   * <!-- begin-user-doc --> <!--
   * end-user-doc -->
   * @generated
   */
  protected IChangeNotifier changeNotifier = new ChangeNotifier();

  /**
   * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}. <!--
   * begin-user-doc --> <!-- end-user-doc -->
   * 
   * @generated
   */
  protected Collection<Object> supportedTypes = new ArrayList<Object>();

  /**
   * This constructs an instance.
   * <!-- begin-user-doc --> <!-- end-user-doc -->
   * @generated
   */
  public CDODefsItemProviderAdapterFactory()
  {
    supportedTypes.add(IEditingDomainItemProvider.class);
    supportedTypes.add(IStructuredItemContentProvider.class);
    supportedTypes.add(ITreeItemContentProvider.class);
    supportedTypes.add(IItemLabelProvider.class);
    supportedTypes.add(IItemPropertySource.class);
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.emf.cdo.defs.CDOViewDef} instances. <!--
   * begin-user-doc --> <!-- end-user-doc -->
   * 
   * @generated
   */
  protected CDOViewDefItemProvider cdoViewDefItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.emf.cdo.defs.CDOViewDef}.
   * <!-- begin-user-doc --> <!--
   * end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createCDOViewDefAdapter()
  {
    if (cdoViewDefItemProvider == null)
    {
      cdoViewDefItemProvider = new CDOViewDefItemProvider(this);
    }

    return cdoViewDefItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.emf.cdo.defs.CDOTransactionDef} instances. <!--
   * begin-user-doc --> <!-- end-user-doc -->
   * 
   * @generated
   */
  protected CDOTransactionDefItemProvider cdoTransactionDefItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.emf.cdo.defs.CDOTransactionDef}.
   * <!-- begin-user-doc --> <!--
   * end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createCDOTransactionDefAdapter()
  {
    if (cdoTransactionDefItemProvider == null)
    {
      cdoTransactionDefItemProvider = new CDOTransactionDefItemProvider(this);
    }

    return cdoTransactionDefItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.emf.cdo.defs.CDOAuditDef} instances. <!--
   * begin-user-doc --> <!-- end-user-doc -->
   * 
   * @generated
   */
  protected CDOAuditDefItemProvider cdoAuditDefItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.emf.cdo.defs.CDOAuditDef}.
   * <!-- begin-user-doc --> <!--
   * end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createCDOAuditDefAdapter()
  {
    if (cdoAuditDefItemProvider == null)
    {
      cdoAuditDefItemProvider = new CDOAuditDefItemProvider(this);
    }

    return cdoAuditDefItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.emf.cdo.defs.CDOSessionDef} instances. <!--
   * begin-user-doc --> <!-- end-user-doc -->
   * 
   * @generated
   */
  protected CDOSessionDefItemProvider cdoSessionDefItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.emf.cdo.defs.CDOSessionDef}.
   * <!-- begin-user-doc --> <!--
   * end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createCDOSessionDefAdapter()
  {
    if (cdoSessionDefItemProvider == null)
    {
      cdoSessionDefItemProvider = new CDOSessionDefItemProvider(this);
    }

    return cdoSessionDefItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.emf.cdo.defs.CDOPackageRegistryDef} instances.
   * <!-- begin-user-doc --> <!-- end-user-doc -->
   * @generated
   */
  protected CDOPackageRegistryDefItemProvider cdoPackageRegistryDefItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.emf.cdo.defs.CDOPackageRegistryDef}.
   * <!-- begin-user-doc --> <!--
   * end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createCDOPackageRegistryDefAdapter()
  {
    if (cdoPackageRegistryDefItemProvider == null)
    {
      cdoPackageRegistryDefItemProvider = new CDOPackageRegistryDefItemProvider(this);
    }

    return cdoPackageRegistryDefItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.emf.cdo.defs.CDOEagerPackageRegistryDef} instances.
   * <!-- begin-user-doc --> <!-- end-user-doc -->
   * @generated
   */
  protected CDOEagerPackageRegistryDefItemProvider cdoEagerPackageRegistryDefItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.emf.cdo.defs.CDOEagerPackageRegistryDef}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createCDOEagerPackageRegistryDefAdapter()
  {
    if (cdoEagerPackageRegistryDefItemProvider == null)
    {
      cdoEagerPackageRegistryDefItemProvider = new CDOEagerPackageRegistryDefItemProvider(this);
    }

    return cdoEagerPackageRegistryDefItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.emf.cdo.defs.CDOLazyPackageRegistryDef} instances.
   * <!-- begin-user-doc --> <!-- end-user-doc -->
   * @generated
   */
  protected CDOLazyPackageRegistryDefItemProvider cdoLazyPackageRegistryDefItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.emf.cdo.defs.CDOLazyPackageRegistryDef}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createCDOLazyPackageRegistryDefAdapter()
  {
    if (cdoLazyPackageRegistryDefItemProvider == null)
    {
      cdoLazyPackageRegistryDefItemProvider = new CDOLazyPackageRegistryDefItemProvider(this);
    }

    return cdoLazyPackageRegistryDefItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.emf.cdo.defs.EDynamicPackageDef} instances.
   * <!-- begin-user-doc --> <!-- end-user-doc -->
   * @generated
   */
  protected EDynamicPackageDefItemProvider eDynamicPackageDefItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.emf.cdo.defs.EDynamicPackageDef}.
   * <!-- begin-user-doc --> <!--
   * end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createEDynamicPackageDefAdapter()
  {
    if (eDynamicPackageDefItemProvider == null)
    {
      eDynamicPackageDefItemProvider = new EDynamicPackageDefItemProvider(this);
    }

    return eDynamicPackageDefItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.emf.cdo.defs.EGlobalPackageDef} instances. <!--
   * begin-user-doc --> <!-- end-user-doc -->
   * 
   * @generated
   */
  protected EGlobalPackageDefItemProvider eGlobalPackageDefItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.emf.cdo.defs.EGlobalPackageDef}.
   * <!-- begin-user-doc --> <!--
   * end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createEGlobalPackageDefAdapter()
  {
    if (eGlobalPackageDefItemProvider == null)
    {
      eGlobalPackageDefItemProvider = new EGlobalPackageDefItemProvider(this);
    }

    return eGlobalPackageDefItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.emf.cdo.defs.CDOClientProtocolFactoryDef} instances.
   * <!-- begin-user-doc --> <!-- end-user-doc -->
   * @generated
   */
  protected CDOClientProtocolFactoryDefItemProvider cdoClientProtocolFactoryDefItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.emf.cdo.defs.CDOClientProtocolFactoryDef}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createCDOClientProtocolFactoryDefAdapter()
  {
    if (cdoClientProtocolFactoryDefItemProvider == null)
    {
      cdoClientProtocolFactoryDefItemProvider = new CDOClientProtocolFactoryDefItemProvider(this);
    }

    return cdoClientProtocolFactoryDefItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.emf.cdo.defs.CDOResourceDef} instances. <!--
   * begin-user-doc --> <!-- end-user-doc -->
   * 
   * @generated
   */
  protected CDOResourceDefItemProvider cdoResourceDefItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.emf.cdo.defs.CDOResourceDef}.
   * <!-- begin-user-doc --> <!--
   * end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createCDOResourceDefAdapter()
  {
    if (cdoResourceDefItemProvider == null)
    {
      cdoResourceDefItemProvider = new CDOResourceDefItemProvider(this);
    }

    return cdoResourceDefItemProvider;
  }

  /**
   * This returns the root adapter factory that contains this factory.
   * <!-- begin-user-doc --> <!-- end-user-doc -->
   * @generated
   */
  public ComposeableAdapterFactory getRootAdapterFactory()
  {
    return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
  }

  /**
   * This sets the composed adapter factory that contains this factory.
   * <!-- begin-user-doc --> <!-- end-user-doc -->
   * @generated
   */
  public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory)
  {
    this.parentAdapterFactory = parentAdapterFactory;
  }

  /**
   * <!-- begin-user-doc --> <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object type)
  {
    return supportedTypes.contains(type) || super.isFactoryForType(type);
  }

  /**
   * This implementation substitutes the factory itself as the key for the adapter.
   * <!-- begin-user-doc --> <!--
   * end-user-doc -->
   * @generated
   */
  @Override
  public Adapter adapt(Notifier notifier, Object type)
  {
    return super.adapt(notifier, this);
  }

  /**
   * <!-- begin-user-doc --> <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object adapt(Object object, Object type)
  {
    if (isFactoryForType(type))
    {
      Object adapter = super.adapt(object, type);
      if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter)))
      {
        return adapter;
      }
    }

    return null;
  }

  /**
   * This adds a listener.
   * <!-- begin-user-doc --> <!-- end-user-doc -->
   * @generated
   */
  public void addListener(INotifyChangedListener notifyChangedListener)
  {
    changeNotifier.addListener(notifyChangedListener);
  }

  /**
   * This removes a listener.
   * <!-- begin-user-doc --> <!-- end-user-doc -->
   * @generated
   */
  public void removeListener(INotifyChangedListener notifyChangedListener)
  {
    changeNotifier.removeListener(notifyChangedListener);
  }

  /**
   * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
   * <!-- begin-user-doc --> <!--
   * end-user-doc -->
   * @generated
   */
  public void fireNotifyChanged(Notification notification)
  {
    changeNotifier.fireNotifyChanged(notification);

    if (parentAdapterFactory != null)
    {
      parentAdapterFactory.fireNotifyChanged(notification);
    }
  }

  /**
   * This disposes all of the item providers created by this factory. 
   * <!-- begin-user-doc --> <!-- end-user-doc -->
   * @generated
   */
  public void dispose()
  {
    if (cdoViewDefItemProvider != null)
      cdoViewDefItemProvider.dispose();
    if (cdoTransactionDefItemProvider != null)
      cdoTransactionDefItemProvider.dispose();
    if (cdoAuditDefItemProvider != null)
      cdoAuditDefItemProvider.dispose();
    if (cdoSessionDefItemProvider != null)
      cdoSessionDefItemProvider.dispose();
    if (cdoPackageRegistryDefItemProvider != null)
      cdoPackageRegistryDefItemProvider.dispose();
    if (cdoEagerPackageRegistryDefItemProvider != null)
      cdoEagerPackageRegistryDefItemProvider.dispose();
    if (cdoLazyPackageRegistryDefItemProvider != null)
      cdoLazyPackageRegistryDefItemProvider.dispose();
    if (eDynamicPackageDefItemProvider != null)
      eDynamicPackageDefItemProvider.dispose();
    if (eGlobalPackageDefItemProvider != null)
      eGlobalPackageDefItemProvider.dispose();
    if (cdoClientProtocolFactoryDefItemProvider != null)
      cdoClientProtocolFactoryDefItemProvider.dispose();
    if (cdoResourceDefItemProvider != null)
      cdoResourceDefItemProvider.dispose();
  }

  /**
   * A child creation extender for the {@link Net4jUtilDefsPackage}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static class Net4jUtilDefsChildCreationExtender implements IChildCreationExtender
  {
    /**
     * The switch for creating child descriptors specific to each extended class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected static class CreationSwitch extends Net4jUtilDefsSwitch<Object>
    {
      /**
       * The child descriptors being populated.
       * <!-- begin-user-doc -->
       * <!-- end-user-doc -->
       * @generated
       */
      protected List<Object> newChildDescriptors;

      /**
       * The domain in which to create the children.
       * <!-- begin-user-doc -->
       * <!-- end-user-doc -->
       * @generated
       */
      protected EditingDomain editingDomain;

      /**
       * Creates the a switch for populating child descriptors in the given domain.
       * <!-- begin-user-doc -->
       * <!-- end-user-doc -->
       * @generated
       */
      CreationSwitch(List<Object> newChildDescriptors, EditingDomain editingDomain)
      {
        this.newChildDescriptors = newChildDescriptors;
        this.editingDomain = editingDomain;
      }

      /**
       * <!-- begin-user-doc -->
       * <!-- end-user-doc -->
       * @generated
       */
      @Override
      public Object caseDefContainer(DefContainer object)
      {
        newChildDescriptors.add(createChildParameter(Net4jUtilDefsPackage.Literals.DEF_CONTAINER__DEFINITIONS,
            CDODefsFactory.eINSTANCE.createCDOViewDef()));

        newChildDescriptors.add(createChildParameter(Net4jUtilDefsPackage.Literals.DEF_CONTAINER__DEFINITIONS,
            CDODefsFactory.eINSTANCE.createCDOTransactionDef()));

        newChildDescriptors.add(createChildParameter(Net4jUtilDefsPackage.Literals.DEF_CONTAINER__DEFINITIONS,
            CDODefsFactory.eINSTANCE.createCDOAuditDef()));

        newChildDescriptors.add(createChildParameter(Net4jUtilDefsPackage.Literals.DEF_CONTAINER__DEFINITIONS,
            CDODefsFactory.eINSTANCE.createCDOSessionDef()));

        newChildDescriptors.add(createChildParameter(Net4jUtilDefsPackage.Literals.DEF_CONTAINER__DEFINITIONS,
            CDODefsFactory.eINSTANCE.createCDOPackageRegistryDef()));

        newChildDescriptors.add(createChildParameter(Net4jUtilDefsPackage.Literals.DEF_CONTAINER__DEFINITIONS,
            CDODefsFactory.eINSTANCE.createCDOEagerPackageRegistryDef()));

        newChildDescriptors.add(createChildParameter(Net4jUtilDefsPackage.Literals.DEF_CONTAINER__DEFINITIONS,
            CDODefsFactory.eINSTANCE.createCDOLazyPackageRegistryDef()));

        newChildDescriptors.add(createChildParameter(Net4jUtilDefsPackage.Literals.DEF_CONTAINER__DEFINITIONS,
            CDODefsFactory.eINSTANCE.createEDynamicPackageDef()));

        newChildDescriptors.add(createChildParameter(Net4jUtilDefsPackage.Literals.DEF_CONTAINER__DEFINITIONS,
            CDODefsFactory.eINSTANCE.createEGlobalPackageDef()));

        newChildDescriptors.add(createChildParameter(Net4jUtilDefsPackage.Literals.DEF_CONTAINER__DEFINITIONS,
            CDODefsFactory.eINSTANCE.createCDOClientProtocolFactoryDef()));

        newChildDescriptors.add(createChildParameter(Net4jUtilDefsPackage.Literals.DEF_CONTAINER__DEFINITIONS,
            CDODefsFactory.eINSTANCE.createCDOResourceDef()));

        return null;
      }

      /**
       * <!-- begin-user-doc -->
       * <!-- end-user-doc -->
       * @generated
       */
      protected CommandParameter createChildParameter(Object feature, Object child)
      {
        return new CommandParameter(null, feature, child);
      }

    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public Collection<Object> getNewChildDescriptors(Object object, EditingDomain editingDomain)
    {
      ArrayList<Object> result = new ArrayList<Object>();
      new CreationSwitch(result, editingDomain).doSwitch((EObject)object);
      return result;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public ResourceLocator getResourceLocator()
    {
      return CDODefsEditPlugin.INSTANCE;
    }
  }

}
