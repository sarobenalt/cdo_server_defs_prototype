/**
 *  * Copyright (c) 2004 - 2011 Eike Stepper (Berlin, Germany) and others.
 *  * All rights reserved. This program and the accompanying materials
 *  * are made available under the terms of the Eclipse Public License v1.0
 *  * which accompanies this distribution, and is available at
 *  * http://www.eclipse.org/legal/epl-v10.html
 *  * 
 *  * Contributors:
 *  *    Andre Dietisheim - initial API and implementation
 */
package org.eclipse.net4j.util.defs.provider;

import org.eclipse.net4j.util.defs.util.Net4jUtilDefsAdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.common.util.ResourceLocator;
import org.eclipse.emf.edit.domain.EditingDomain;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ChildCreationExtenderManager;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IChildCreationExtender;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.eclipse.net4j.util.defs.Net4jUtilDefsPackage;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers. The adapters generated by this
 * factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}. The adapters
 * also support Eclipse property sheets. Note that most of the adapters are shared among multiple instances. <!--
 * begin-user-doc --> <!-- end-user-doc -->
 * 
 * @generated
 * @since 4.1
 */
public class Net4jUtilDefsItemProviderAdapterFactory extends Net4jUtilDefsAdapterFactory implements
    ComposeableAdapterFactory, IChangeNotifier, IDisposable, IChildCreationExtender
{
  /**
   * This keeps track of the root adapter factory that delegates to this adapter factory.
   * <!-- begin-user-doc --> <!--
   * end-user-doc -->
   * @generated
   */
  protected ComposedAdapterFactory parentAdapterFactory;

  /**
   * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
   * <!-- begin-user-doc --> <!--
   * end-user-doc -->
   * @generated
   */
  protected IChangeNotifier changeNotifier = new ChangeNotifier();

  /**
   * This helps manage the child creation extenders.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ChildCreationExtenderManager childCreationExtenderManager = new ChildCreationExtenderManager(
      Net4jUtilDefsEditPlugin.INSTANCE, Net4jUtilDefsPackage.eNS_URI);

  /**
   * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}. <!--
   * begin-user-doc --> <!-- end-user-doc -->
   * 
   * @generated
   */
  protected Collection<Object> supportedTypes = new ArrayList<Object>();

  /**
   * This constructs an instance.
   * <!-- begin-user-doc --> <!-- end-user-doc -->
   * @generated
   */
  public Net4jUtilDefsItemProviderAdapterFactory()
  {
    supportedTypes.add(IEditingDomainItemProvider.class);
    supportedTypes.add(IStructuredItemContentProvider.class);
    supportedTypes.add(ITreeItemContentProvider.class);
    supportedTypes.add(IItemLabelProvider.class);
    supportedTypes.add(IItemPropertySource.class);
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.net4j.util.defs.DefContainer} instances. <!--
   * begin-user-doc --> <!-- end-user-doc -->
   * 
   * @generated
   */
  protected DefContainerItemProvider defContainerItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.net4j.util.defs.DefContainer}.
   * <!-- begin-user-doc --> <!--
   * end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createDefContainerAdapter()
  {
    if (defContainerItemProvider == null)
    {
      defContainerItemProvider = new DefContainerItemProvider(this);
    }

    return defContainerItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.net4j.util.defs.ThreadPoolDef} instances. <!--
   * begin-user-doc --> <!-- end-user-doc -->
   * 
   * @generated
   */
  protected ThreadPoolDefItemProvider threadPoolDefItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.net4j.util.defs.ThreadPoolDef}.
   * <!-- begin-user-doc --> <!--
   * end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createThreadPoolDefAdapter()
  {
    if (threadPoolDefItemProvider == null)
    {
      threadPoolDefItemProvider = new ThreadPoolDefItemProvider(this);
    }

    return threadPoolDefItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.net4j.util.defs.RandomizerDef} instances. <!--
   * begin-user-doc --> <!-- end-user-doc -->
   * 
   * @generated
   */
  protected RandomizerDefItemProvider randomizerDefItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.net4j.util.defs.RandomizerDef}.
   * <!-- begin-user-doc --> <!--
   * end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createRandomizerDefAdapter()
  {
    if (randomizerDefItemProvider == null)
    {
      randomizerDefItemProvider = new RandomizerDefItemProvider(this);
    }

    return randomizerDefItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.net4j.util.defs.UserManagerDef} instances. <!--
   * begin-user-doc --> <!-- end-user-doc -->
   * 
   * @generated
   */
  protected UserManagerDefItemProvider userManagerDefItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.net4j.util.defs.UserManagerDef}.
   * <!-- begin-user-doc --> <!--
   * end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createUserManagerDefAdapter()
  {
    if (userManagerDefItemProvider == null)
    {
      userManagerDefItemProvider = new UserManagerDefItemProvider(this);
    }

    return userManagerDefItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.net4j.util.defs.User} instances. <!--
   * begin-user-doc --> <!-- end-user-doc -->
   * 
   * @generated
   */
  protected UserItemProvider userItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.net4j.util.defs.User}. <!-- begin-user-doc --> <!-- end-user-doc
   * -->
   * 
   * @generated
   */
  @Override
  public Adapter createUserAdapter()
  {
    if (userItemProvider == null)
    {
      userItemProvider = new UserItemProvider(this);
    }

    return userItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.net4j.util.defs.PasswordCredentialsProviderDef} instances.
   * <!-- begin-user-doc --> <!-- end-user-doc -->
   * @generated
   */
  protected PasswordCredentialsProviderDefItemProvider passwordCredentialsProviderDefItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.net4j.util.defs.PasswordCredentialsProviderDef}. <!--
   * begin-user-doc --> <!-- end-user-doc -->
   * 
   * @generated
   */
  @Override
  public Adapter createPasswordCredentialsProviderDefAdapter()
  {
    if (passwordCredentialsProviderDefItemProvider == null)
    {
      passwordCredentialsProviderDefItemProvider = new PasswordCredentialsProviderDefItemProvider(this);
    }

    return passwordCredentialsProviderDefItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.net4j.util.defs.ResponseNegotiatorDef} instances.
   * <!-- begin-user-doc --> <!-- end-user-doc -->
   * @generated
   */
  protected ResponseNegotiatorDefItemProvider responseNegotiatorDefItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.net4j.util.defs.ResponseNegotiatorDef}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createResponseNegotiatorDefAdapter()
  {
    if (responseNegotiatorDefItemProvider == null)
    {
      responseNegotiatorDefItemProvider = new ResponseNegotiatorDefItemProvider(this);
    }

    return responseNegotiatorDefItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.net4j.util.defs.ChallengeNegotiatorDef} instances.
   * <!-- begin-user-doc --> <!-- end-user-doc -->
   * @generated
   */
  protected ChallengeNegotiatorDefItemProvider challengeNegotiatorDefItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.net4j.util.defs.ChallengeNegotiatorDef}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createChallengeNegotiatorDefAdapter()
  {
    if (challengeNegotiatorDefItemProvider == null)
    {
      challengeNegotiatorDefItemProvider = new ChallengeNegotiatorDefItemProvider(this);
    }

    return challengeNegotiatorDefItemProvider;
  }

  /**
   * This returns the root adapter factory that contains this factory.
   * <!-- begin-user-doc --> <!-- end-user-doc -->
   * @generated
   */
  public ComposeableAdapterFactory getRootAdapterFactory()
  {
    return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
  }

  /**
   * This sets the composed adapter factory that contains this factory.
   * <!-- begin-user-doc --> <!-- end-user-doc -->
   * @generated
   */
  public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory)
  {
    this.parentAdapterFactory = parentAdapterFactory;
  }

  /**
   * <!-- begin-user-doc --> <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object type)
  {
    return supportedTypes.contains(type) || super.isFactoryForType(type);
  }

  /**
   * This implementation substitutes the factory itself as the key for the adapter.
   * <!-- begin-user-doc --> <!--
   * end-user-doc -->
   * @generated
   */
  @Override
  public Adapter adapt(Notifier notifier, Object type)
  {
    return super.adapt(notifier, this);
  }

  /**
   * <!-- begin-user-doc --> <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object adapt(Object object, Object type)
  {
    if (isFactoryForType(type))
    {
      Object adapter = super.adapt(object, type);
      if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter)))
      {
        return adapter;
      }
    }

    return null;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public List<IChildCreationExtender> getChildCreationExtenders()
  {
    return childCreationExtenderManager.getChildCreationExtenders();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Collection<?> getNewChildDescriptors(Object object, EditingDomain editingDomain)
  {
    return childCreationExtenderManager.getNewChildDescriptors(object, editingDomain);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ResourceLocator getResourceLocator()
  {
    return childCreationExtenderManager;
  }

  /**
   * This adds a listener.
   * <!-- begin-user-doc --> <!-- end-user-doc -->
   * @generated
   */
  public void addListener(INotifyChangedListener notifyChangedListener)
  {
    changeNotifier.addListener(notifyChangedListener);
  }

  /**
   * This removes a listener.
   * <!-- begin-user-doc --> <!-- end-user-doc -->
   * @generated
   */
  public void removeListener(INotifyChangedListener notifyChangedListener)
  {
    changeNotifier.removeListener(notifyChangedListener);
  }

  /**
   * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
   * <!-- begin-user-doc --> <!--
   * end-user-doc -->
   * @generated
   */
  public void fireNotifyChanged(Notification notification)
  {
    changeNotifier.fireNotifyChanged(notification);

    if (parentAdapterFactory != null)
    {
      parentAdapterFactory.fireNotifyChanged(notification);
    }
  }

  /**
   * This disposes all of the item providers created by this factory. 
   * <!-- begin-user-doc --> <!-- end-user-doc -->
   * @generated
   */
  public void dispose()
  {
    if (defContainerItemProvider != null)
      defContainerItemProvider.dispose();
    if (threadPoolDefItemProvider != null)
      threadPoolDefItemProvider.dispose();
    if (randomizerDefItemProvider != null)
      randomizerDefItemProvider.dispose();
    if (userManagerDefItemProvider != null)
      userManagerDefItemProvider.dispose();
    if (userItemProvider != null)
      userItemProvider.dispose();
    if (passwordCredentialsProviderDefItemProvider != null)
      passwordCredentialsProviderDefItemProvider.dispose();
    if (responseNegotiatorDefItemProvider != null)
      responseNegotiatorDefItemProvider.dispose();
    if (challengeNegotiatorDefItemProvider != null)
      challengeNegotiatorDefItemProvider.dispose();
  }

}
